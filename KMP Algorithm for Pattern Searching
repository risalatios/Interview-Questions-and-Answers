KMP Algorithm for Pattern Searching

//The worst case complexity of the Naive algorithm is O(m(n-m+1)). The time complexity of KMP algorithm is O(n) in the worst case.


extension String {
    subscript(_ offSet: Int) -> Character {
        let index = self.index(self.startIndex, offsetBy: offSet)
        return self[index]
    }
}

// LSP calculation

func lsp(pat: String) -> [Int] {
    if pat.isEmpty {
        return []
    }
    let m = pat.count
    var i = 1
    var j = 0
    var lsp = Array(repeating: 0, count: m)
    // start j = 0 and i = 1
    while i < m {
        if pat[i] == pat[j] {
            j += 1
            lsp[i] = j
            i += 1
        } else {
            if j != 0 {
                j = lsp[j - 1]
            } else {
                lsp[i] = 0
                i += 1
            }
        }
    }
    
    return lsp
}

func match(pat: String, in text: String) -> Int {
    var i = 0
    var j = 0
    var count = 0
    let m = pat.count
    let n = text.count
    let lsp = lsp(pat: pat)
    
    while i < n && !pat.isEmpty && !text.isEmpty {
        if pat[j] == text[i] {
            i += 1
            j += 1
        }
        if j == m {
            j = 0
            count += 1
        } else if i < n && pat[j] != text[i] {
            if j != 0 {
                j = lsp[j - 1]
            } else {
                i += 1
            }
        }
    }
    return count
}

print(match(pat: "AAAAB", in: "AAAAAAAAAAAAAAAAAB"))
